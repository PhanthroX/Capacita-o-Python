#Utilização:

# -- importação das libs
# import logging
# import logging.config

# -- indicação do arquivo de configuração
# logging.config.fileConfig('./logs/logging.conf')

# -- instanciação da classe
# logger = logging.getLogger('root')

# -- disparo do log de acordo com o nível
# logging.info("teste de log info")
# logging.debug("teste de log debug")

[loggers]
keys=root

# Infoma quais são os handlers: screen = print em tela | file = grava em arquivo | email = dispara e-mail
[logger_root]
handlers=screen,file,email
level=DEBUG

# Indica a formatação do log, pode-se criar N formatações, conforme necessidade
[formatters]
keys=default_formatter, second_formatter

# Definição da configuração default
[formatter_default_formatter]
format=%(asctime)s - %(levelname)s - Module:%(module)s / Function:%(funcName)s - %(message)s

#Definição da configuração secundária
[formatter_second_formatter]
format=%(asctime)s - %(levelname)s - %(message)s

[handlers]
keys=file,screen,email

#Hierarquia de log (segue ordem decrescente):
 # -- CRITICAL
 # -- FATAL
 # -- ERROR
 # -- WARNING
 # -- INFO
 # -- DEBUG
 # -- NOTSET
 # O primeiro na hierarquia é o NOTSET
 # Sempre que for definido um nível de log no arquivo de configuração, todos os logs de níveis superiores irão 
 # respeitar as configurações, desde que não tenham configuração própria. Exemplo: configurei o nível DEBUG, caso o nível INFO
 # não tenha configuração, então irá respeitar a configuração do DEBUG

# configuração do arquivo de log
[handler_file]
class=FileHandler
level=INFO
formatter=default_formatter
args=('./logs/rpa.log', 'a', 'utf-8')

# configuração do log printado no console
[handler_screen]
class=StreamHandler
formatter=default_formatter
level=DEBUG
args=(sys.stdout,)

[handler_email]
class=StreamHandler
formatter=default_formatter
level=WARNING
args=(sys.stdout,)